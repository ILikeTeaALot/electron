From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: John Kleinschmidt <jkleinsc@electronjs.org>
Date: Thu, 22 Jun 2023 16:58:36 -0400
Subject: Revert "Ensures high-res timer in DesktopCaptureDevice on Windows"

https://chromium-review.googlesource.com/c/chromium/src/+/4585093 added code to
activate the  high-res timer in DesktopCaptureDevice on Windows, but the timer
can be deactivated elsewhere and when that happens the call to
base::Time::ActivateHighResolutionTimer(false) in the ScopedHighResolutionTimer
destructor DCHECKS because the timer has already been deactivated.

diff --git a/content/browser/media/capture/desktop_capture_device.cc b/content/browser/media/capture/desktop_capture_device.cc
index ef10371aa95ce930956975171077cccb6567e614..fad87da621c8d72634fdae417d6af9c35da9ad57 100644
--- a/content/browser/media/capture/desktop_capture_device.cc
+++ b/content/browser/media/capture/desktop_capture_device.cc
@@ -138,31 +138,6 @@ void LogDesktopCaptureRequestRefreshRate(DesktopMediaID::Type capturer_type,
   }
 }
 
-// Helper class which request that the system-global Windows timer interrupt
-// frequency be raised at construction. The corresponding deactivation is done
-// at destruction. How high the frequency is raised depends on the system's
-// power state and possibly other options. Only supported on Windows.
-class ScopedHighResolutionTimer {
- public:
-#if !BUILDFLAG(IS_WIN)
-  ScopedHighResolutionTimer() {}
-#else
-  ScopedHighResolutionTimer() {
-    if (!base::Time::IsHighResolutionTimerInUse()) {
-      enabled_ = base::Time::ActivateHighResolutionTimer(true);
-    }
-  }
-  ~ScopedHighResolutionTimer() {
-    if (enabled_) {
-      base::Time::ActivateHighResolutionTimer(false);
-    }
-  }
-
- private:
-  bool enabled_;
-#endif
-};
-
 }  // namespace
 
 class DesktopCaptureDevice::Core : public webrtc::DesktopCapturer::Callback {
@@ -222,10 +197,6 @@ class DesktopCaptureDevice::Core : public webrtc::DesktopCapturer::Callback {
 
   bool zero_hertz_is_supported() const { return zero_hertz_is_supported_; }
 
-  // Requests high-resolution timers on Windows if not already active.
-  // Created in AllocateAndStart() and destroyed in ~Core().
-  std::unique_ptr<ScopedHighResolutionTimer> scoped_high_res_timer_;
-
   // Task runner used for capturing operations.
   scoped_refptr<base::SingleThreadTaskRunner> task_runner_;
 
@@ -363,7 +334,6 @@ void DesktopCaptureDevice::Core::AllocateAndStart(
   DCHECK(client);
   DCHECK(!client_);
 
-  scoped_high_res_timer_ = std::make_unique<ScopedHighResolutionTimer>();
   client_ = std::move(client);
   requested_frame_rate_ = params.requested_format.frame_rate;
   frame_rate_ = requested_frame_rate_;
